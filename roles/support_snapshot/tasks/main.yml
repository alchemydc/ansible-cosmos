---
- name: Install jq and awscli
  become: true
  apt:
    name:
      - awscli
      - jq
    state: present
    update_cache: yes
  when: snapshot_method is defined and snapshot_method == 'aws'

- name: Install gcloud sdk (cli)
  import_tasks: roles/support_snapshot/tasks/gcloud_sdk.yml
  when: snapshot_method is defined and snapshot_method == 'gcloud'

- name: Install rclone
  become: true
  apt:
    name:
      - rclone
    state: present
    update_cache: yes
  when: snapshot_method is defined and snapshot_method == 'rclone'

- name: Ensure that the user's .config folder exists
  file:
    path: '{{ user_dir }}/.config'
    state: directory
    mode: '0750'
  when: snapshot_storage is defined and snapshot_storage == "gcs"

- name: Deploy gcloud service account key
  copy:
    src: 'roles/support_snapshot/files/gcloud_svc_acct_key.json.encrypted'
    dest: '{{ user_dir }}/.config/gcloud_svc_account_key.json'
    owner: '{{ ansible_user }}'
    group: '{{ ansible_user }}'
    mode: '0600'
  when: snapshot_storage is defined and snapshot_storage == "gcs"

- name: Create rclone config directory
  file:
    path: '{{ user_dir }}/.config/rclone'
    state: directory
    mode: '0750'
  when: snapshot_method is defined and snapshot_method == 'rclone'

- name: Deploy rclone config file
  template:
    src: 'roles/support_snapshot/templates/rclone.conf.j2'
    dest: '{{ user_dir }}/.config/rclone/rclone.conf'
    owner: '{{ ansible_user }}'
    group: '{{ ansible_user }}'
    mode: '0600'
  when: snapshot_method is defined and snapshot_method == "rclone"

- name: Install lz4
  become: true
  apt:
    name: lz4
    state: present
    update_cache: yes

- name: Create snapshot directory
  file:
    path: '{{ user_dir }}/snapshot'
    state: directory
    mode: '0755'

- name: Clone and build cosmprund
  import_tasks: roles/support_snapshot/tasks/cosmprund.yml
  when: take_snapshots|bool == true and type == 'backup'

- name: Copy take snapshot script
  template:
    src: 'snapshot.sh.j2'
    dest: '{{ user_dir }}/snapshot/take_snapshot_{{ network }}.sh'
    owner: '{{ ansible_user }}'
    group: '{{ ansible_user }}'
    mode: '0700'

- name: Create take snapshot cronjob    # careful with this, as this will stop the daemon to take the snapshot. do NOT run this on validators!
  cron:
    user: '{{ ansible_user }}'
    name: '{{ network }} snapshot'
    minute: '{{ snapshot_minute }}'
    hour: '{{ snapshot_hour }}'
    #job: '/bin/bash {{ user_dir }}/snapshot/take_snapshot_{{ network }}.sh'
    job: '/bin/bash {{ user_dir }}/snapshot/take_snapshot_{{ network }}.sh | logger'
  when: (take_snapshots|bool == true and type == 'backup')

- name: Copy restore from snapshot script
  template:
    src: 'restore_snapshot.sh.j2'
    dest: '{{ user_dir }}/snapshot/restore_snapshot_{{ network }}.sh'
    owner: '{{ ansible_user }}'
    group: '{{ ansible_user }}'
    mode: '0700'
  when: restore_snapshots|bool == true

- name: Configure chaindata cleanup & restore automation
  import_tasks: roles/support_snapshot/tasks/cleanup.yml
  when: cleanup|bool == true
  tags: 'cleanup'
