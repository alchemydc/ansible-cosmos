#!/bin/bash
set -euo pipefail
IFS=$'\n\t'

# Get block height
echo "Getting block height from RPC"
BLOCK_HEIGHT=$(curl -s http://localhost:{{ custom_port_prefix }}657/status | jq -r .result.sync_info.latest_block_height)
echo "Block height: $BLOCK_HEIGHT"

# prune node
echo "Stopping {{ network }} daemon to prune the chain data"
sudo systemctl stop {{ network }}
sleep 5

#{{ user_dir }}/go/bin/cosmos-pruner prune ~/{{ folder }}/data --cosmos-sdk=false
{{ user_dir }}/go/bin/cosmos-pruner prune ~/{{ folder }}/data
sleep 5

# Compress the folder
echo "Compressing chaindata..."
FILENAME=$(echo {{ network }}_${BLOCK_HEIGHT}.tar.lz4)
cd {{ user_dir }}/{{ folder }}
{% if wasm is defined and wasm is sameas true %}
tar cvf - data wasm | lz4 > "{{ user_dir }}/$FILENAME"
{% else %}
tar cvf - data | lz4 > "{{ user_dir }}/$FILENAME"
{% endif %}

# Transfer the addrbook
echo "Uploading the addrbook.json to persistent storage"
#cd {{ user_dir }}/{{ folder }}/config
#aws s3 --endpoint="{{ snapshot_endpoint }}" --acl="public-read" cp addrbook.json "s3://addrbook/{{ network }}/" --profile={{ snapshot_profile }}
rclone copy --gcs-bucket-policy-only {{ user_dir }}/{{ folder }}/config/addrbook.json remote:{{ snapshot_bucket }}

# Restart the service
echo "Restarting {{ network }} daemon"
sudo systemctl start {{ network }}

{% if snapshot_storage is defined and snapshot_storage is contains("gcs") %}
# Transfer the file to GCS
echo "Copying the file to persistent storage on GCS"
cd {{ user_dir }}/
rclone copy --gcs-bucket-policy-only $FILENAME remote:{{ snapshot_bucket }}
{% endif %}

{% if snapshot_storage is defined and snapshot_storage is contains("b2") %}
# Transfer the file to B2
echo "Copying the file to persistent storage on B2"
cd {{ user_dir }}/
rclone copyto $FILENAME b2:{{ b2_bucket }}/sdl-agoric-snapshot.tar.lz4
{% endif %}

#remove the file
echo "removing the file after uploading"
rm -v $FILENAME

